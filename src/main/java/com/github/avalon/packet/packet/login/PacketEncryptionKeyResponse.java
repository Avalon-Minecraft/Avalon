package com.github.avalon.packet.packet.login;

import com.github.avalon.common.data.DataType;
import com.github.avalon.network.ProtocolType;
import com.github.avalon.packet.annotation.PacketRegister;
import com.github.avalon.packet.packet.Packet;
import com.github.avalon.packet.schema.FunctionScheme;
import com.github.avalon.packet.schema.PacketStrategy;
import com.github.avalon.player.PlayerConnection;

/**
 * This packet is sent by client as a part of verification process for "original" minecraft clients.
 *
 * <h3>Packet Strategy</h3>
 *
 * <ul>
 *   <li>1. Server identifier.
 *   <li>2. Server's public key.
 *   <li>3. A sequence of random bytes generated by the server.
 * </ul>
 *
 * @version 1.1
 */
@PacketRegister(
    operationCode = 0x01,
    protocolType = ProtocolType.LOGIN,
    direction = PacketRegister.Direction.SERVER)
public class PacketEncryptionKeyResponse extends Packet<PacketEncryptionKeyResponse> {

  public PacketStrategy strategy =
      new PacketStrategy(
          new FunctionScheme<>(DataType.BYTE_ARRAY, this::getSharedSecret, this::setSharedSecret),
          new FunctionScheme<>(DataType.BYTE_ARRAY, this::getVerifyToken, this::setVerifyToken));

  private byte[] sharedSecret;
  private byte[] verifyToken;

  public PacketEncryptionKeyResponse() {}

  public PacketEncryptionKeyResponse(byte[] sharedSecret, byte[] verifyToken) {
    this.sharedSecret = sharedSecret;
    this.verifyToken = verifyToken;
  }

  @Override
  public boolean isAsync() {
    return true;
  }

  @Override
  public void handle(PlayerConnection connection, PacketEncryptionKeyResponse packet) {
    connection.getPlayer().getServer().getPacketModule().handle(packet, connection);
  }

  @Override
  public PacketStrategy getStrategy() {
    return strategy;
  }

  public byte[] getSharedSecret() {
    return sharedSecret;
  }

  public void setSharedSecret(byte[] sharedSecret) {
    this.sharedSecret = sharedSecret;
  }

  public byte[] getVerifyToken() {
    return verifyToken;
  }

  public void setVerifyToken(byte[] verifyToken) {
    this.verifyToken = verifyToken;
  }
}
